

(Project.no-echo)

(defn simple []
  (let [ages1 {@"Alice" 31
               @"Bob" 40
               @"Charlie" 23
               @"Dave" 56
               @"Emily" 42}
        ages2 (Map.put ages1 "Dave" &57)]
    (do
      (println* "Charlie is " (Map.get &ages2 "Charlie") " years old.")
      (println* "Dave is " (Map.get &ages2 "Dave") " years old.")
      (println* "Maria is " (Map.get &ages2 "Maria") " years old."))))

(defn start-with-empty []
  (let [a {}
        b (Map.put a "aha" &123)]
    (println* (Map.get &b "aha"))))

(defn checking []
  (let [char-map {\a @"Aha"
                  \b @"Boo"}]
    (do
      (println* (Map.contains? &char-map &\b))
      (println* (Map.contains? &char-map &\c)))))

(defn main []
  (do (simple)
      (start-with-empty)
      (checking)))



############################################

### Textのように固定した答えで正解の場合、、、

> (IO.println "Hello, world!") A

> (IO.println "こんにちは\nAtCoder") EX.1

> (IO.println "いつも2525\nAtCoderくん")

> (IO.println "3
1
2
2"
)

###############################################


